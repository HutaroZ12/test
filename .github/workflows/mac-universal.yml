on:
  workflow_call:
    inputs:
      artifactName:
        required: true
        type: string
      artifactPath:
        required: true
        type: string
      cachePath:
        required: true
        type: string
      cacheLibrariesPath:
        required: true
        type: string
      exportPath:
        required: true
        type: string

env:
  HAXE_VERSION: 4.3.6
  PROJECT_NAME: PSliceEngine

jobs:
  build:
    name: Build
    runs-on: macos-15
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Setup Haxe
        uses: krdlab/setup-haxe@master
        with:
          haxe-version: ${{ env.HAXE_VERSION }}
      - name: Set XCode app
        if: inputs.os == 'macos-15'
        run: sudo xcode-select -s /Applications/Xcode_16.4.app

      - name: Restore Libraries for compilation
        id: load-lib-cache
        uses: actions/cache@v3
        with:
          # not caching the bin folder to prevent asset duplication and stuff like that
          key: ${{ inputs.cacheLibrariesPath }}
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: |
            .haxelib/
          restore-keys: |
            ${{ inputs.cacheLibrariesPath }}
      - name: Restore existing build cache for faster compilation
        id: load-cache
        uses: actions/cache@v3
        with:
          # not caching the bin folder to prevent asset duplication and stuff like that
          key: ${{ inputs.cachePath }}
          path: |
            export/release/${{ inputs.exportPath }}/haxe/
            export/release/${{ inputs.exportPath }}/obj/
          restore-keys: |
            cache-build-${{ inputs.exportPath }}

      - name: Compile (ARM64)
        run: |
          haxelib run lime build mac -D HXCPP_ARM64 
          mv ./export/release/macos/bin/PSliceEngine.app/Contents/MacOS/PSliceEngine ./pslice-arm

      - name: Compile (x86_64)
        run: |
          haxelib run lime build mac -64  -D HXCPP_M64 
          mv ./export/release/macos/bin/PSliceEngine.app/Contents/MacOS/PSliceEngine ./pslice-x86
      - name: Reflux because yes
        run: lipo -create -output ./export/release/macos/bin/PSliceEngine.app/Contents/MacOS/PSliceEngine ./pslice-x86 ./pslice-arm
          
      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: ${{ inputs.artifactName }}
          path: ${{ inputs.artifactPath }}
          if-no-files-found: error      
      - name: Clearing already existing cache
        uses: actions/github-script@v6
        with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.key == "${{ inputs.cachePath }}") {
                console.log('Clearing ' + cache.key + '...')
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
                console.log("Cache cleared.")
              }
            }
      - name: Uploading new cache
        uses: actions/cache@v3
        with:
          key: ${{ inputs.cachePath }}
          path: |
            export/release/${{ inputs.exportPath }}/haxe/
            export/release/${{ inputs.exportPath }}/obj/
          restore-keys: |
            ${{ inputs.cachePath }}